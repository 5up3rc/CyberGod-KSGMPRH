// SWAMI KARUPPASWAMI THUNNAI
#pragma once
#include<iostream>
#include<string>
#include<map>
#include<set>
#include<thread>
#include"scanner.h"

#include "Callbacks.h"

// version upgraded to unicode
// version checked for maps
template<typename malwares>
class Malware : public Scanner
{
private:
	// count of scanned files
	long double file_count=0; 
	// count of malware
	long int malware_count=0; 
	//boost scan speed
	bool is_boost_enabled = true; // for now we will set this manually - use a GUI dev for check boxes
	// Suspicious File List
	std::map<malwares, std::string> suspicious_files_list;
	// List of locations to be scheduled
	std::set<malwares> schedule_list;
	// Scheduler 
	bool add_to_schedule(malwares location);

    MalwareScan_OnStatus OnStatus;
    void* OnStatusContext;    
    MalwareScan_OnError OnError;
    void* OnErrorContext;
    MalwareScan_OnNewFile OnNewFile;    
    void* OnNewFileContext;
    MalwareScan_OnMalicious OnMalicious;
    void* OnMaliciousContext;
    MalwareScan_OnScheduled OnScheduled;
    void* OnScheduledContext;
    IsStopped isStopped;
    void* IsStoppedContext;
    
    void Init();
    bool CheckIsStopped();
public:
    Malware();
	Malware(MalwareScan_OnStatus OnStatus, void* OnStatusContext,
        MalwareScan_OnError OnError, void* OnErrorContext, 
        IsStopped isStopped, void* IsStoppedContext);

	bool scan(const wchar_t* sDir);

	std::string start_hashing(malwares file_location); // MD5 hashing of files
	bool check_in_database(std::string hash); // Check in the sqlite3 Database
	void increment_file_count(); // Incrementing the scanned files count
	long double return_file_count(); // Returning the scanned files count
	bool return_boost_scan_status(); // Returning the boost scan status
	void set_boost_scan(bool set_scan_speed = true); // Setting boost scan
	void scan_scheduled_files();// scan the scheduled files
	bool add_suspicious_files_to_list(malwares location, std::string type); //method which is used to find the suspicious files
	void display_suspicious_files(); //used to display all the suspicious files

    void SetOnNewFile(MalwareScan_OnNewFile OnNewFile, void* OnNewFileContext);
    void SetOnMalicious(MalwareScan_OnMalicious OnMalicious, void* OnMaliciousContext);
    void SetOnScheduled(MalwareScan_OnScheduled OnScheduled, void* OnScheduledContext);
};
