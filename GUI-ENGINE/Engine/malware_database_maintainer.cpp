// SWAMI KARUPPASWAMI THUNNAI

#include"Malware.h"
#include"sqlite_modern_cpp.h"
#include<map>
#include<set>
#include<exception>
using namespace sqlite;

/*
This .cpp file is used for handling database, it deals with addition of signatures
matching, maintaining etc., and etc., 

*/


template<typename malwares>
Malware<malwares>::Malware()
{
    this->OnStatus = NULL;
    this->OnStatusContext = NULL;

    this->OnError = NULL;
    this->OnErrorContext = NULL;

    OnNewFile = NULL;
    OnNewFileContext = NULL;

    this->isStopped = NULL;
    this->IsStoppedContext = NULL;

    OnMalicious = NULL;
    OnMaliciousContext = NULL;

    OnScheduled = NULL;
    OnScheduledContext = NULL;

    Init();
}

// This method is for preventing accidental crash of the application
template<typename malwares>
Malware<malwares>::Malware(MalwareScan_OnStatus OnStatus, void* OnStatusContext, MalwareScan_OnError OnError, void* OnErrorContext, IsStopped isStopped, void* IsStoppedContext)
{
    this->OnStatus = OnStatus;
    this->OnStatusContext = OnStatusContext;

    this->OnError = OnError;
    this->OnErrorContext = OnErrorContext;

    OnNewFile = NULL;
    OnNewFileContext = NULL;

    this->isStopped = isStopped;
    this->IsStoppedContext = IsStoppedContext;

    OnMalicious = NULL;
    OnMaliciousContext = NULL;

    OnScheduled = NULL;
    OnScheduledContext = NULL;

    Init();
}

template<typename malwares>
void Malware<malwares>::SetOnNewFile(MalwareScan_OnNewFile OnNewFile, void* OnNewFileContext)
{
    this->OnNewFile = OnNewFile;
    this->OnNewFileContext = OnNewFileContext;
}

template<typename malwares>
void Malware<malwares>::SetOnMalicious(MalwareScan_OnMalicious OnMalicious, void* OnMaliciousContext)
{
    this->OnMalicious = OnMalicious;
    this->OnMaliciousContext = OnMaliciousContext;
}

template<typename malwares>
void Malware<malwares>::SetOnScheduled(MalwareScan_OnScheduled OnScheduled, void* OnScheduledContext)
{
    this->OnScheduled = OnScheduled;
    this->OnScheduledContext = OnScheduledContext;
}

template<typename malwares>
void Malware<malwares>::Init()
{
	std::map<std::string, std::string> numericals;
	numericals["0"] = "zero";
	numericals["1"] = "one";
	numericals["2"] = "two";
	numericals["3"] = "three";
	numericals["4"] = "four";
	numericals["5"] = "five";
	numericals["6"] = "six";
	numericals["7"] = "seven";
	numericals["8"] = "eight";
	numericals["9"] = "nine";
	std::string alpha = "abcdefghijklmnopqrstuvwxyz";
	typedef std::map<std::string, std::string>::iterator iterator;
	database db("ksgmprh.db");
	for (int i = 0; i < alpha.size(); i++)
	{
		std::string table_name(1,alpha[i]);
		//std::cout << "\nchecking the database...\n";
        if (OnStatus)
        {
            OnStatus(OnStatusContext, L"Checking the database...");
        }

		std::string query = "create table if not exists " + table_name + " (";
		try
		{
			std::string schema = query + "hash text primary key not null,variant text not null);";
			db << schema;
		}
		catch (std::exception &e)
		{
            if (OnError)
            {
                std::string str = e.what();
                std::wstring exceptionText(str.begin(), str.end());
                OnError(OnErrorContext, exceptionText.c_str(), 1);
            }			
		}
	}
	iterator itr1 = numericals.begin();
	iterator itr2 = numericals.end();
	for (iterator itr = itr1; itr != itr2; ++itr)
	{
		std::string table_name = itr->second;
		std::string query = "create table if not exists " + table_name + " (";
		try
		{
			std::string schema = query + "hash text primary key not null,variant text not null);";
			db << schema;
		}
		catch (std::exception &e)
		{
            if (OnError)
            {
                std::string str = e.what();
                std::wstring exceptionText(str.begin(), str.end());
                OnError(OnErrorContext, exceptionText.c_str(), 2);
            }
		}
	}
   
    if (OnStatus)
    {
        OnStatus(OnStatusContext, L"");
    }
}


// Ifthe hash is matches this method will return true else false
template<typename malwares>
bool Malware<malwares>::check_in_database(std::string hash)
{
	bool status = false;
	try
	{
		// this is the location of the database, I think I need to change the location in
		//future
		database db("ksgmprh.db");
		std::string table_name(1, hash[0]);
		// the below one is used if the hash starts with any numericals then finding in appropirate tables 
		std::map<std::string, std::string> numericals;
		numericals["0"] = "zero";
		numericals["1"] = "one";
		numericals["2"] = "two";
		numericals["3"] = "three";
		numericals["4"] = "four";
		numericals["5"] = "five";
		numericals["6"] = "six";
		numericals["7"] = "seven";
		numericals["8"] = "eight";
		numericals["9"] = "nine";
		std::map<std::string, std::string>::iterator itr = numericals.find(table_name);
		// If the table name starts with numericals then,
		std::string query = "select hash,variant from ";
		if (itr != numericals.end())query += itr->second;
		else query += table_name;
		query += " where hash = ? ;";
		// so now we got our query properly
		db << query << hash >> [&](std::unique_ptr<std::string> value, std::string type) {
			if (value != nullptr) status = true;
			else status = false;
		};
	}
	catch (std::exception &e)
	{
		std::cout << e.what();
		status = false;
	}
	return status;
}

template class Malware<std::wstring>;