#include <list>

#include <boost\filesystem.hpp>

#include <wx\wxprec.h>
#include <wx\sizer.h>

#include "NewFileEventData.h"
#include "MalwareScanPanel.h"

#include "Engine\Malware.h"
#include "Engine\Extras.h"

#include "ThreadEvents.h"

BEGIN_EVENT_TABLE(MalwareScanPanel, wxPanel)
// catch paint events
// EVT_PAINT(MalwareScanPanel::paintEvent)
    EVT_CLOSE(MalwareScanPanel::OnClose)
END_EVENT_TABLE()


class MalwareScanThread : public MalwareOperationalThread
{
    MalwareScanPanel* panel;
    std::list<wxString> location;

    MalwareScan_OnNewFile OnNewFile;
    void* OnNewFileContext;

    MalwareScan_OnMalicious OnMalicious;
    void* OnMaliciousContext;

    MalwareScan_OnScheduled OnScheduled;
    void* OnScheduledContext;

    MalwareScan_OnStatus OnStatus;
    void* OnStatusContext;    
public:
    MalwareScanThread(MalwareScanPanel* panel, std::list<wxString>& location);
    
    virtual void *Entry();

    void SetOnNewFile(MalwareScan_OnNewFile OnNewFile, void* OnNewFileContext);
    void SetOnStatus(MalwareScan_OnStatus OnStatus, void* OnStatusContext);
    
    void SetOnMalicious(MalwareScan_OnMalicious OnMalicious, void* OnMaliciousContext);
    void SetOnScheduled(MalwareScan_OnScheduled OnScheduled, void* OnScheduledContext);    
};

class MalwareDeleteThread : public MalwareOperationalThread
{
    MalwareScanPanel* panel;
    wxCheckListBox* checkListBox;

    MalwareScan_OnDeleteFile OnDeleteFile;
    void* OnDeleteContext;
public:
    MalwareDeleteThread(MalwareScanPanel* panel, wxCheckListBox* checkListBox);
    void SetOnDeleteFile(MalwareScan_OnDeleteFile OnDeleteFile, void* OnDeleteContext);

    virtual void *Entry();
};



MalwareScanThread::MalwareScanThread(MalwareScanPanel* panel, std::list<wxString>& location) : MalwareOperationalThread()
{
    this->panel = panel;

    this->location = location;

    OnNewFile = NULL;
    OnNewFileContext = NULL;
    OnMalicious = NULL;
    OnMaliciousContext = NULL;
    OnScheduled = NULL;
    OnScheduledContext = NULL;
    OnStatus = NULL;    
    OnStatusContext = NULL;    
}

void MalwareScanThread::SetOnNewFile(MalwareScan_OnNewFile OnNewFile, void* OnNewFileContext)
{
    this->OnNewFile = OnNewFile;
    this->OnNewFileContext = OnNewFileContext;
}

void MalwareScanThread::SetOnMalicious(MalwareScan_OnMalicious OnMalicious, void* OnMaliciousContext)
{
    this->OnMalicious = OnMalicious;
    this->OnMaliciousContext = OnMaliciousContext;
}

void MalwareScanThread::SetOnScheduled(MalwareScan_OnScheduled OnScheduled, void* OnScheduledContext)
{
    this->OnScheduled = OnScheduled;
    this->OnScheduledContext = OnScheduledContext;
}

void MalwareScanThread::SetOnStatus(MalwareScan_OnStatus OnStatus, void* OnStatusContext)
{
    this->OnStatus = OnStatus;
    this->OnStatusContext = OnStatusContext;
}

void* MalwareScanThread::Entry()
{

    Malware<std::wstring> obj(OnStatus, OnStatusContext, OnError, OnErrorContext, isStopped, IsStoppedContext);
    obj.SetOnNewFile(OnNewFile, OnNewFileContext);
    obj.SetOnScheduled(OnScheduled, OnScheduledContext);
    obj.SetOnMalicious(OnMalicious, OnMaliciousContext);

    obj.set_boost_scan(false);    
    
    for (std::list<wxString>::iterator it = location.begin(); it != location.end() && !isStopped(IsStoppedContext); it++)
    {                
        obj.scan(it->wc_str());
    }
    obj.scan_scheduled_files();
    
    OnFinish(OnFinishContext);

    return NULL;
}

MalwareDeleteThread::MalwareDeleteThread(MalwareScanPanel* panel, wxCheckListBox* checkListBox) : MalwareOperationalThread()
{
    this->panel = panel;
    this->checkListBox = checkListBox;

    this->OnDeleteFile = NULL;
    this->OnDeleteContext = NULL;
}

void MalwareDeleteThread::SetOnDeleteFile(MalwareScan_OnDeleteFile OnDeleteFile, void* OnDeleteContext)
{
    this->OnDeleteFile = OnDeleteFile;
    this->OnDeleteContext = OnDeleteContext;
}

void* MalwareDeleteThread::Entry()
{
    
    for (int itemIndex = checkListBox->GetCount(); itemIndex > 0 ; itemIndex-- )
    {
        if (checkListBox->IsChecked(itemIndex - 1))
        {
            wxString name = checkListBox->GetItem(itemIndex - 1)->GetName();
            wchar_t* ww = (wchar_t*)(name.c_str().AsWChar());
			_tremove(ww); // removing file itself
            OnDeleteFile(OnDeleteContext, itemIndex - 1);
        }
    }

    OnFinish(OnFinishContext);
    return NULL;
}


MalwareScanPanel::MalwareScanPanel(wxFrame* parent, int option) : OperationalPanel(parent)
{    
    this->option = option;

    Connect(EVT_MALWARE_SCAN_STATUS, wxThreadEventHandler(MalwareScanPanel::OnGUIStatus));    
    Connect(EVT_MALWARE_SCAN_ERROR, wxThreadEventHandler(MalwareScanPanel::OnGUIError));
    Connect(EVT_MALWARE_SCAN_FINISH, wxThreadEventHandler(MalwareScanPanel::OnGUIScanFinish));
    Connect(EVT_MALWARE_SCAN_NEWFILE, wxThreadEventHandler(MalwareScanPanel::OnGUINewFile));
    Connect(EVT_MALWARE_SCAN_FOUND, wxThreadEventHandler(MalwareScanPanel::OnGUISMalicious));
    Connect(EVT_MALWARE_SCHEDULED, wxThreadEventHandler(MalwareScanPanel::OnGUIScheduled));    
    Connect(EVT_MALWARE_DELETE_FILE, wxThreadEventHandler(MalwareScanPanel::OnGUIDeleteFile));
    Connect(EVT_MALWARE_DELETE_FINISH, wxThreadEventHandler(MalwareScanPanel::OnGUIDeleteFinish));
    
}


MalwareScanPanel::~MalwareScanPanel()
{
    Wait();    

    Disconnect(EVT_MALWARE_SCAN_STATUS, wxThreadEventHandler(MalwareScanPanel::OnGUIStatus));
    Disconnect(EVT_MALWARE_SCAN_ERROR, wxThreadEventHandler(MalwareScanPanel::OnGUIError));
    Disconnect(EVT_MALWARE_SCAN_FINISH, wxThreadEventHandler(MalwareScanPanel::OnGUIScanFinish));
    Disconnect(EVT_MALWARE_SCAN_NEWFILE, wxThreadEventHandler(MalwareScanPanel::OnGUINewFile));
    Disconnect(EVT_MALWARE_SCAN_FOUND, wxThreadEventHandler(MalwareScanPanel::OnGUISMalicious));
    Disconnect(EVT_MALWARE_SCHEDULED, wxThreadEventHandler(MalwareScanPanel::OnGUIScheduled));
    Disconnect(EVT_MALWARE_DELETE_FILE, wxThreadEventHandler(MalwareScanPanel::OnGUIDeleteFile));
    Disconnect(EVT_MALWARE_DELETE_FINISH, wxThreadEventHandler(MalwareScanPanel::OnGUIDeleteFinish));        
}

void MalwareScanPanel::CreateChildControls()
{
    CreatePanels();
            

    wxStaticText* locationText = new wxStaticText(scanPanel, wxID_ANY, "Location: ", wxPoint(20, 20));
    wxFont font = locationText->GetFont();
    //font.SetWeight(wxFONTWEIGHT_BOLD);    
    wxFont boldFont;        
    boldFont.Create(font.GetPixelSize(), font.GetFamily(), wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD);
    locationText->SetFont(boldFont);
    if (option == 0)
    {
        locationEdit = new wxTextCtrl(scanPanel, 1001, wxEmptyString, wxPoint(80, 20), wxSize(320, 16), wxBORDER_NONE);
    }
    if (option == 1)
    {
        wchar_t* path1;
        if (SUCCEEDED(SHGetKnownFolderPath(FOLDERID_AppsFolder, KF_FLAG_DEFAULT, NULL, &path1)))
        {
            quickLocationText = new wxStaticText(scanPanel, wxID_ANY, "AppData Folder, Program Files(x86) Folder, Windows Folder", wxPoint(80, 20));
            CoTaskMemFree(path1);
        }
        else
        {
            quickLocationText = new wxStaticText(scanPanel, wxID_ANY, "Program Files(x86) Folder, Windows Folder", wxPoint(80, 20));
        }
    }
    startButton = new wxButton(scanPanel, 1002, "Start", wxPoint(80, 42));

    statusLabel = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(20, 100));
    statusLabel->SetFont(boldFont);
    statusLabel->Hide();    
    
    pathLabel = new wxStaticText(scanPanel, wxID_ANY, "Path: ", wxPoint(20, 130));
    pathLabel->SetFont(boldFont);
    extensionLabel = new wxStaticText(scanPanel, wxID_ANY, "Extension: ", wxPoint(20, 150));
    extensionLabel->SetFont(boldFont);
    hashLabel = new wxStaticText(scanPanel, wxID_ANY, "Hash: ", wxPoint(20, 170));
    hashLabel->SetFont(boldFont);
    
    pathLabel->Hide();
    extensionLabel->Hide();
    hashLabel->Hide();
    
    pathText = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(105, 130), wxSize(655, 15), wxST_ELLIPSIZE_MIDDLE);
    extensionText = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(105, 150));
    hashText = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(105, 170));

    pathText->Hide();
    extensionText->Hide();
    hashText->Hide();

    filesCountLabel = new wxStaticText(scanPanel, wxID_ANY, "Scanned Files: ", wxPoint(20, 200));
    filesCountLabel->SetFont(boldFont);

    scheduledCountLabel = new wxStaticText(scanPanel, wxID_ANY, "Scheduled Files: ", wxPoint(20, 220));
    scheduledCountLabel->SetFont(boldFont);

    idendifiedCountLabel = new wxStaticText(scanPanel, wxID_ANY, "Identified Malicious Files: ", wxPoint(20, 250));
    idendifiedCountLabel->SetFont(boldFont);

    packedCountLabel = new wxStaticText(scanPanel, wxID_ANY, "Suspictious Packed Files: ", wxPoint(20, 270));
    packedCountLabel->SetFont(boldFont);

    filesCountText = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(227, 200), wxSize(60,16), wxALIGN_RIGHT);
    scheduledCountText = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(227, 220), wxSize(60, 16), wxALIGN_RIGHT);
    idendifiedCountText = new wxStaticText(scanPanel, wxID_ANY, "00", wxPoint(227, 250), wxSize(60, 16), wxALIGN_RIGHT);
    packedCountText = new wxStaticText(scanPanel, wxID_ANY, "00", wxPoint(227, 270), wxSize(60, 16), wxALIGN_RIGHT);
        
    filesCountLabel->Hide();
    scheduledCountLabel->Hide();
    idendifiedCountLabel->Hide();
    packedCountLabel->Hide();

    filesCountText->Hide();
    scheduledCountText->Hide();
    idendifiedCountText->Hide();
    packedCountText->Hide();

    cleanButton = new wxButton(scanPanel, 1003, "Clean...", wxPoint(300, 255));
    cleanButton->Hide();

    errorLabel = new wxStaticText(scanPanel, wxID_ANY, "", wxPoint(20, 400));
    errorLabel->SetForegroundColour(wxColor(255,0,0));


    wxStaticText* checkListBoxLabel = new wxStaticText(deletePanel, wxID_ANY, "List of malicious files:", wxPoint(20, 12));
    checkListBoxLabel->SetFont(boldFont);
    checkListBox = new wxCheckListBox(deletePanel, 2001, wxPoint(20, 30), wxSize(730, 310));
    long style = wxBORDER_NONE | checkListBox->GetWindowStyle();
    checkListBox->SetWindowStyle(style);

    wxStaticText* szSelectedDirLabel = new wxStaticText(deletePanel, wxID_ANY, "Selected Path:", wxPoint(20, 345));
    wxStaticText* szSelectedFileLabel = new wxStaticText(deletePanel, wxID_ANY, "Selected File:", wxPoint(20, 362));
    szSelectedDirLabel->SetFont(boldFont);
    szSelectedFileLabel->SetFont(boldFont);        
    szSelectedDirText = new wxStaticText(deletePanel, wxID_ANY, "", wxPoint(110, 345), wxSize(640, 16), wxST_ELLIPSIZE_MIDDLE);
    szSelectedFileText = new wxStaticText(deletePanel, wxID_ANY, "", wxPoint(110, 362), wxSize(640, 16));
    
    
    returnButton = new wxButton(deletePanel, 2002, "Return...", wxPoint(20, 396));
    removeButton = new wxButton(deletePanel, 2003, "Remove", wxPoint(20, 396));
    wxSize buttonSize = removeButton->GetSize();
    removeButton->SetPosition(wxPoint(750 - buttonSize.GetWidth(), 396));
    
    //Bind(wxEVT_CHECKLISTBOX, &MalwareScanPanel::OnSelectedFileToDelete, this, 2001);
    Bind(wxEVT_LISTBOX, &MalwareScanPanel::OnSelectedFileToDelete, this, 2001);

    Bind(wxEVT_BUTTON, &MalwareScanPanel::OnStartButton, this, 1002);
    Bind(wxEVT_BUTTON, &MalwareScanPanel::OnCleanButton, this, 1003);
    Bind(wxEVT_BUTTON, &MalwareScanPanel::OnReturnButton, this, 2002);
    Bind(wxEVT_BUTTON, &MalwareScanPanel::OnRemoveButton, this, 2003);
}

void MalwareScanPanel::OnSelectedFileToDelete(wxCommandEvent& event)
{
    int index = event.GetInt();
    wxOwnerDrawn* item = checkListBox->GetItem(index);
    wxString name = item->GetName();
    
    boost::filesystem::path Path = name;

    szSelectedDirText->SetLabelText(Path.parent_path().c_str());
    szSelectedFileText->SetLabelText(Path.filename().c_str());
}

void MalwareScanPanel::OnClose(wxCloseEvent & evt)
{
    Stop();        
}

void MalwareScanPanel::paintEvent(wxPaintEvent & evt)
{
    // depending on your system you may need to look at double-buffered dcs
    wxPaintDC dc(this);
    render(dc);
}

void MalwareScanPanel::paintNow()
{
    // depending on your system you may need to look at double-buffered dcs
    wxClientDC dc(this);
    render(dc);
}

void MalwareScanPanel::render(wxDC&  dc)
{    
}

void MalwareScanPanel::OnStartButton(wxCommandEvent& event)
{    
    if (!inProgress)
    {
        startButton->SetLabelText("Stop");
        if (option == 0)
        {
            locationEdit->Enable(false);
        }

        cleanButton->Hide();
        checkListBox->Clear();

        scheduledCountLabel->Hide();
        scheduledCountText->Hide();
        filesCountLabel->Hide();
        filesCountText->Hide();
        packedCountText->Hide();
        packedCountLabel->Hide();
        idendifiedCountText->Hide();
        idendifiedCountLabel->Hide();

        inProgress = true;
        std::list<wxString> locationList;
        if (option == 0)
        {
            locationList.push_back(locationEdit->GetValue());
        }
        if (option == 1)
        {
            wchar_t* path1;
            wchar_t* path2;
            wchar_t* path3;

            
            SHGetKnownFolderPath(FOLDERID_ProgramFilesX86, KF_FLAG_DEFAULT, NULL, &path2);
            SHGetKnownFolderPath(FOLDERID_Windows, KF_FLAG_DEFAULT, NULL, &path3);
            /*
            std::wstring app_data = known_location(FOLDERID_AppsFolder);
            std::wstring program_filesx86 = known_location(FOLDERID_ProgramFilesX86);
            std::wstring windows = known_location(FOLDERID_Windows);
            */

            if (SUCCEEDED(SHGetKnownFolderPath(FOLDERID_AppsFolder, KF_FLAG_DEFAULT, NULL, &path1)))
            {
                locationList.push_back(wxString(path1));
                CoTaskMemFree(path1);
            }

            locationList.push_back(wxString(path2));
            locationList.push_back(wxString(path3));

            CoTaskMemFree(path2);
            CoTaskMemFree(path3);
        }

             
        stopFlag = 0;        
        fileCount = 0;
        scheduledCount = 0;
        identifiedCount = 0;
        packedCount = 0;

        MalwareScanThread* scanThread = new MalwareScanThread(this, locationList);        
        scanThread->SetOnNewFile(OnNewFile, this);
        scanThread->SetOnStatus(OnStatus, this);
        scanThread->SetOnError(OnError, this);
        scanThread->SetOnFinish(OnScanFinish, this);
        scanThread->SetOnScheduled(OnScheduled, this);
        scanThread->SetOnMalicious(OnMalicious, this);
        scanThread->SetIsStopped(IsProcessStopped, this);
        currentThread = scanThread;
        currentThread->Run();
    }
    else
    {
        Stop();
    }    
}

void MalwareScanPanel::OnCleanButton(wxCommandEvent& event)
{
    SwitchToDelete();    
}

void MalwareScanPanel::OnReturnButton(wxCommandEvent& event)
{
    SwitchToScan();   
}

void MalwareScanPanel::OnRemoveButton(wxCommandEvent& event)
{    
    checkListBox->Enable(false);
    removeButton->Enable(false);
    returnButton->Enable(false); 
    szSelectedDirText->SetLabelText("");
    szSelectedFileText->SetLabelText("");

    MalwareDeleteThread* deleteThread = new MalwareDeleteThread(this, checkListBox);
    deleteThread->SetOnDeleteFile(OnDeleteFile, this);
    deleteThread->SetOnFinish(OnDeleteFinish, this);
    deleteThread->SetIsStopped(IsProcessStopped, this);
    currentThread = deleteThread;
    currentThread->Run();
}

void MalwareScanPanel::OnNewFile(void* context, const wchar_t* path, const wchar_t* extension, const wchar_t* hash)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;

    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_SCAN_NEWFILE);
    NewFileEventData* obj = new NewFileEventData();

    obj->current_path = path;
    obj->extension = extension;
    obj->hash = hash;

    evt->SetEventObject(obj);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnMalicious(void* context, const wchar_t* path, int type)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;

    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_SCAN_FOUND);
    evt->SetString(path);
    evt->SetInt(type);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnScheduled(void* context, const wchar_t* path, int type)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;

    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_SCHEDULED);
    evt->SetString(path);
    evt->SetInt(type);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnStatus(void* context, const wchar_t* status)
{    
    wxEvtHandler* handler = (wxEvtHandler*)context;

    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_SCAN_STATUS);
    evt->SetString(status);
    wxQueueEvent(handler, evt);  
}

void MalwareScanPanel::OnError(void* context, const wchar_t* errorText, int errorType)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;

    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_SCAN_ERROR);
    evt->SetString(errorText);
    evt->SetInt(errorType);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnScanFinish(void* context)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;
    ((MalwareScanPanel*)context)->inProgress = false;    
    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_SCAN_FINISH);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnDeleteFile(void* context, int index)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;

    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_DELETE_FILE);    
    evt->SetInt(index);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnDeleteFinish(void* context)
{
    wxEvtHandler* handler = (wxEvtHandler*)context;
    ((MalwareScanPanel*)context)->inProgress = false;
    wxThreadEvent* evt = new wxThreadEvent(EVT_MALWARE_DELETE_FINISH);
    wxQueueEvent(handler, evt);
}

void MalwareScanPanel::OnGUIStatus(wxThreadEvent& event)
{
    wxString statusString = event.GetString();
    statusLabel->SetLabel(statusString);    
    statusLabel->Show();
}

void MalwareScanPanel::OnGUINewFile(wxThreadEvent& event)
{
    NewFileEventData* obj = (NewFileEventData*)event.GetEventObject();

    pathText->Show();
    
    //hashText->Show();

    pathLabel->Show();
    
    //hashLabel->Show();

    pathText->SetLabel(obj->current_path);
    /*if (obj->extension == "?")
    {
        extensionLabel->Hide();
        extensionText->Hide();
        extensionText->SetLabel("");
    }
    else
    {
        extensionLabel->Show();
        extensionText->Show();
        extensionText->SetLabel(obj->extension);
    }
    hashText->SetLabel(obj->hash);*/

    fileCount++;

    char countText[128];
    sprintf(countText, "%d", fileCount);
    filesCountLabel->Show();    
    filesCountText->Show();
    filesCountText->SetLabel(countText);
    
    delete obj;
}

void MalwareScanPanel::OnGUIScheduled(wxThreadEvent& event)
{
    wxString pathString = event.GetString();
    int scheduleType = event.GetInt();

    scheduledCount++;

    char countText[128];
    sprintf(countText, "%d", scheduledCount);
    scheduledCountLabel->Show();
    scheduledCountText->Show();
    scheduledCountText->SetLabel(countText);    
}

void MalwareScanPanel::OnGUISMalicious(wxThreadEvent& event)
{
    wxString pathString = event.GetString();
    int maliciousType = event.GetInt();

    if (maliciousType==MALICIOUS_IDENTIFID)
        identifiedCount++;
    if (maliciousType == MALICIOUS_PACKED)
        packedCount++;

    checkListBox->Append(pathString);    

    char countText[128];
    sprintf(countText, "%d", identifiedCount);
    idendifiedCountText->Show();
    idendifiedCountLabel->Show();
    idendifiedCountText->SetLabel(countText);

    sprintf(countText, "%d", packedCount);
    packedCountText->Show();
    packedCountLabel->Show();
    packedCountText->SetLabel(countText);

    //fileCount++;    
    //sprintf(countText, "%d", fileCount);
    //filesCountLabel->Show();
    //filesCountText->Show();
    //filesCountText->SetLabel(countText);
}

void MalwareScanPanel::OnGUIError(wxThreadEvent& event)
{
    wxString errorString = event.GetString();
    int errorType = event.GetInt();
    errorLabel->SetLabel(errorString);
    errorLabel->Show();
}

void MalwareScanPanel::OnGUIScanFinish(wxThreadEvent& event)
{
    startButton->SetLabelText("Start");

    pathLabel->Hide();
    extensionLabel->Hide();
    hashLabel->Hide();
    pathText->Hide();
    extensionText->Hide();
    hashText->Hide();

    if (option == 0)
    {
        locationEdit->Enable(true);
    }

    inProgress = false;
    currentThread = NULL;

    if (identifiedCount > 0 || packedCount > 0)
        cleanButton->Show();

    if (IsProcessStopped(this))
        wxMessageBox("Stopped");
    else
        wxMessageBox("Finished");
}

void MalwareScanPanel::OnGUIDeleteFile(wxThreadEvent& event)
{
    int deleteIndex = event.GetInt();
    checkListBox->Delete(deleteIndex);
}

void MalwareScanPanel::OnGUIDeleteFinish(wxThreadEvent& event)
{
    checkListBox->Enable(true);
    removeButton->Enable(true);
    returnButton->Enable(true);

    if (checkListBox->GetCount() == 0)
        removeButton->Hide();
}